#include<iostream>
#include<queue>
#include<vector>
#include<cmath>
#include<algorithm>
using namespace std;

int N, M;
int chicken_distance = 987654321;
int city_chicken_distance = 987654321;
int house_map[51][51];
vector<pair<int, int>> house_target;
vector<pair<int, int>> chicken;
bool visited[51][51];

void dfs(vector<pair<int, int>> chicken_target, int times) {
	if (chicken_target.size() == M) {
		// 2의 개수 찼을 때 각 1에서 2까지의 거리 최소 찾기
		for (int i = 1; i <= house_target.size(); i++) {
			for (int j = 1; j <= chicken_target.size(); j++) {
				int x = abs(house_target[i].first - chicken_target[j].first);
				int y = abs(house_target[i].second - chicken_target[j].second);
				if (chicken_distance > x + y) {
					chicken_distance = x + y;
				}
			}
			city_chicken_distance += chicken_distance;
		}
		return;
	}
	for (int i = chicken_target.front().first; i <= N; i++) {
		for (int j = chicken_target.front().second; j <= N; j++) {
			//치킨 집인데 chicken vector에 없는 치킨집이라면 push
			if (house_map[i][j] == 2 && visited[i][j] == true) {
				continue;
			}
			else if (house_map[i][j] == 2 && visited[i][j] == false) {
				chicken.push_back({ i,j });
				visited[i][j] = true;
				dfs(chicken, times + 1);
				visited[i][j] = false;
				
			}
			
		}
	}
}

int main() {
	cin >> N >> M;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> house_map[i][j];
			if (house_map[i][j] == 1) {
				house_target.push_back({ i, j });
			}
		}
	}

	dfs(chicken, 0);
	cout << city_chicken_distance << '\n';
	return 0;
}
